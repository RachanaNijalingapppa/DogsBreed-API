@model DogBreeds.Models.DogBreed
@{
    ViewData["Title"] = "Edit Breed";
}

<div class="container mt-4">
    <h2>Edit @Model.Name</h2>
    <hr />

    <div class="row">
        <div class="col-md-6">
            <form asp-action="Edit" id="breedForm">
                <input type="hidden" asp-for="Name" />
                <div asp-validation-summary="ModelOnly" class="alert alert-danger"></div>

                <div class="form-group mb-3">
                    <label class="form-label">Breed Name</label>
                    <input asp-for="Name" class="form-control" readonly />
                </div>

                <div class="form-group mb-3">
                    <label class="form-label">Sub-Breeds</label>
                    <div id="subBreedsContainer">
                        @for (int i = 0; i < Model.SubBreeds.Count; i++)
                        {
                            <div class="input-group mb-2 sub-breed-item">
                                <input name="SubBreeds[@i]"
                                       value="@Model.SubBreeds[i]"
                                       class="form-control sub-breed-input"
                                       placeholder="Enter sub-breed name" />
                                <button type="button" class="btn btn-outline-danger remove-subbreed">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                        }
                    </div>
                    <button type="button" id="addSubBreed" class="btn btn-outline-primary mt-2">
                        <i class="fas fa-plus-circle"></i> Add Sub-Breed
                    </button>
                    <div id="subBreedError" class="text-danger small mt-1"></div>
                </div>

                <div class="form-group mt-4">
                    <button type="submit" class="btn btn-primary">
                        <i class="fas fa-save"></i> Save Changes
                    </button>
                    <a asp-action="Index" class="btn btn-secondary">
                        <i class="fas fa-arrow-left"></i> Back to List
                    </a>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const container = document.getElementById('subBreedsContainer');
            const addButton = document.getElementById('addSubBreed');
            let subBreedCount = @Model.SubBreeds.Count;

            // Add new sub-breed field
            addButton?.addEventListener('click', function() {
                const div = document.createElement('div');
                div.className = 'input-group mb-2 sub-breed-item';
                div.innerHTML = `
                    <input name="SubBreeds[${subBreedCount}]"
                           class="form-control sub-breed-input"
                           placeholder="Enter sub-breed name" />
                    <button type="button" class="btn btn-outline-danger remove-subbreed">
                        <i class="fas fa-trash"></i>
                    </button>
                `;
                container.appendChild(div);
                subBreedCount++;
            });

            // Remove sub-breed field
            container?.addEventListener('click', function(e) {
                if (e.target.closest('.remove-subbreed')) {
                    const item = e.target.closest('.sub-breed-item');
                    item.remove();

                    // Re-index all remaining sub-breeds
                    const items = container.querySelectorAll('.sub-breed-item');
                    items.forEach((item, index) => {
                        item.querySelector('.sub-breed-input').name = `SubBreeds[${index}]`;
                    });
                    subBreedCount = items.length;
                }
            });

            // Form validation
            document.getElementById('breedForm')?.addEventListener('submit', function(e) {
                let isValid = true;
                const subBreedInputs = document.querySelectorAll('.sub-breed-input');

                // Validate sub-breeds (no empty values)
                subBreedInputs.forEach(input => {
                    if (!input.value.trim()) {
                        isValid = false;
                        input.classList.add('is-invalid');
                    }
                });

                if (!isValid) {
                    e.preventDefault();
                    document.getElementById('subBreedError').textContent =
                        'Please fill in all sub-breed fields or remove empty ones';
                }
            });
        });
    </script>

    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}